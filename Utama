// ===== FILE: Utama.gs (VERSI FINAL) =====

function doPost(e) {
  if (!e || !e.postData || !e.postData.contents) return HtmlService.createHtmlOutput("Bad Request");

  try {
    const config = bacaKonfigurasi();
    const receivedToken = e.parameter.token;
    if (!config.WEBHOOK_BOT_TOKEN || receivedToken !== config.WEBHOOK_BOT_TOKEN) {
      console.error("Akses tidak sah: Token webhook tidak cocok.");
      return HtmlService.createHtmlOutput("Unauthorized Access");
    }

    const update = JSON.parse(e.postData.contents);
    let userId, fromChatId, text, isCallback = false, firstName;

    if (update.callback_query) {
      isCallback = true;
      userId = update.callback_query.from.id;
      firstName = update.callback_query.from.first_name;
      fromChatId = update.callback_query.message.chat.id;
    } else if (update.message && update.message.text) {
      userId = update.message.from.id;
      firstName = update.message.from.first_name;
      fromChatId = update.message.chat.id;
      text = update.message.text;
    } else {
      return HtmlService.createHtmlOutput("OK");
    }
    
    if (String(fromChatId) !== String(config.TELEGRAM_CHAT_ID)) {
        console.warn(`Pesan dari Chat ID tidak dikenal diabaikan: ${fromChatId}`);
        return HtmlService.createHtmlOutput("OK");
    }
    
    // Logika Gatekeeper tetap dipertahankan
    const isUserRegistered = getUserData(userId);
    if (!isUserRegistered) {
      console.warn(`Akses DITOLAK untuk User ID tidak terdaftar: ${userId} (${firstName})`);
      const userMention = `<a href="tg://user?id=${userId}">${escapeHtml(firstName)}</a>`;
      const pesanDitolak = `‚ùå ${userMention}, akses Anda ditolak.\nAnda tidak terdaftar untuk menggunakan bot ini. Silakan hubungi administrator.`;
      kirimPesanTelegram(pesanDitolak, config, 'HTML'); 
      return HtmlService.createHtmlOutput("Unauthorized"); 
    }
    
    if (isCallback) {
      const callbackQuery = update.callback_query;
      const data = callbackQuery.data; 
      const callbackQueryId = callbackQuery.id;

      if (data.startsWith("history_")) {
        const pk = data.split("_")[1];
        getVmHistory(pk, config);
      } 
      else if (data.startsWith("cekvm_")) {
        const pk = data.split("_")[1];
        findVmAndGetInfo(pk, config);
      }
      else if (data.startsWith("run_export_")) {
        // Panggil pusat logika ekspor dengan tipe dari callback data
        handleExportRequest(data, config);
      }
      
      answerCallbackQuery(callbackQueryId, config);
    } else {
      const commandParts = text.split(' ');
      let command = commandParts[0].toLowerCase();
      if (command.includes('@')) {
        command = command.split('@')[0];
      }
      
      switch (command) {
        case '/laporan':
          kirimPesanTelegram("‚úÖ Permintaan diterima. Memproses laporan...", config);
          buatLaporanHarianVM();
          break;
        case '/sync_laporan':
          kirimPesanTelegram("‚úÖ Permintaan diterima. Memulai sinkronisasi & laporan...", config);
          syncDanBuatLaporanHarian(false);
          break;
        case '/provisioning':
          generateProvisioningReport(config);
          break;
        case '/export':
          kirimMenuEkspor(config);
          break;
        case '/cekvm':
          if (commandParts.length > 1) {
            const searchTerm = commandParts.slice(1).join(' ');
            findVmAndGetInfo(searchTerm, config);
          } else {
            kirimPesanTelegram(`Gunakan format: <code>/cekvm [${KONSTANTA.HEADER_VM.IP} / ${KONSTANTA.HEADER_VM.VM_NAME} / ${KONSTANTA.HEADER_VM.PK}]</code>`, config);
          }
          break;
        case '/history':
          if (commandParts.length > 1) {
            const pk = commandParts[1].trim();
            getVmHistory(pk, config);
          } else {
            kirimPesanTelegram(`Gunakan format: <code>/history [${KONSTANTA.HEADER_VM.PK}]</code>`, config, 'HTML');
          }
          break;
        case '/cekhistory':
          getTodaysHistory(config);
          break;
        case '/info':
             const infoPesan = "<b>Daftar Perintah Bot Laporan VM</b>\n" +
                              "------------------------------------\n\n" +
                              "<code>/laporan</code>\n" +
                              "<i><b>(Cepat)</b> Membuat laporan instan berdasarkan data terakhir yang tersimpan di bot. Perintah ini <u>TIDAK</u> menyalin data baru dari sumber.</i>\n\n" +
                              "<code>/sync_laporan</code>\n" +
                              "<i><b>(Lengkap)</b> Menyalin data terbaru dari semua sheet sumber (VM & Datastore), lalu membuat laporan lengkap. Gunakan ini untuk mendapatkan data paling up-to-date.</i>\n\n" +
                              "<code>/provisioning</code>\n" +
                              "<i>Menampilkan laporan analisis alokasi resource (CPU, Mem, Disk).</i>\n\n" +
                              "<code>/export</code>\n" +
                              "<i>Menampilkan menu untuk mengunduh berbagai jenis laporan dalam format file.</i>\n\n" +
                              `<code>/cekvm [${KONSTANTA.HEADER_VM.IP} / ${KONSTANTA.HEADER_VM.VM_NAME} / ${KONSTANTA.HEADER_VM.PK}]</code>\n` + 
                              "<i>Mencari detail sebuah VM.</i>\n\n" +
                              `<code>/history [${KONSTANTA.HEADER_VM.PK}]</code>\n` + 
                              "<i>Menampilkan riwayat perubahan VM tertentu.</i>\n\n" +
                              "<code>/cekhistory</code>\n" + 
                              "<i>Menampilkan semua log perubahan yang terjadi hari ini.</i>\n\n" +
                              "<code>/info</code>\n" +
                              "<i>Menampilkan daftar perintah ini.</i>";
            kirimPesanTelegram(infoPesan, config);
            break;
        default:
          kirimPesanTelegram(`‚ùå Perintah <code>${escapeHtml(commandParts[0])}</code> tidak dikenal.\n\nKirim /info untuk melihat daftar perintah yang tersedia.`, config);
          break;
      }
    }
  } catch (err) {
    console.error(`Error di doPost: ${err.message}\nStack: ${err.stack}`);
    try {
      const configForError = bacaKonfigurasi();
      kirimPesanTelegram(`<b>‚ö†Ô∏è Terjadi Error pada Bot</b>\n\n<code>${escapeHtml(err.message)}</code>`, configForError);
    } catch (errorNested) {
      console.error(`GAGAL MENGIRIM NOTIFIKASI ERROR: ${errorNested.message}`);
    }
  }
  return HtmlService.createHtmlOutput("OK");
}

function kirimMenuEkspor(config) {
    const message = "<b>Pusat Laporan Ekspor</b>\n\nSilakan pilih data yang ingin Anda ekspor ke dalam file Google Sheet.";
    const keyboard = {
        inline_keyboard: [
            [{ text: "--- Laporan Log Perubahan ---", callback_data: "ignore" }],
            [
                { text: "üìÑ Log Hari Ini", callback_data: KONSTANTA.CALLBACK.EXPORT_LOG_TODAY },
                { text: "üìÖ Log 7 Hari", callback_data: KONSTANTA.CALLBACK.EXPORT_LOG_7_DAYS }
            ],
            [{ text: "üóìÔ∏è Log 30 Hari", callback_data: KONSTANTA.CALLBACK.EXPORT_LOG_30_DAYS }],
            [{ text: "--- Laporan VM berdasarkan Uptime ---", callback_data: "ignore" }],
            [
                { text: "‚öôÔ∏è < 1 Thn", callback_data: KONSTANTA.CALLBACK.EXPORT_UPTIME_CAT_1 },
                { text: "‚öôÔ∏è 1-2 Thn", callback_data: KONSTANTA.CALLBACK.EXPORT_UPTIME_CAT_2 },
                { text: "‚öôÔ∏è 2-3 Thn", callback_data: KONSTANTA.CALLBACK.EXPORT_UPTIME_CAT_3 }
            ],
            [
                { text: "‚öôÔ∏è > 3 Thn", callback_data: KONSTANTA.CALLBACK.EXPORT_UPTIME_CAT_4 },
                { text: "‚ùì Uptime Tdk Valid", callback_data: KONSTANTA.CALLBACK.EXPORT_UPTIME_INVALID }
            ],
            [{ text: "--- Laporan Data Master VM ---", callback_data: "ignore" }],
            [
                { text: "üìÑ Semua VM", callback_data: KONSTANTA.CALLBACK.EXPORT_ALL_VMS },
                { text: "üè¢ VM di VC01", callback_data: KONSTANTA.CALLBACK.EXPORT_VC01_VMS },
                { text: "üè¢ VM di VC02", callback_data: KONSTANTA.CALLBACK.EXPORT_VC02_VMS }
            ]
        ]
    };
    kirimPesanTelegram(message, config, 'HTML', keyboard);
}


function onOpen() {
  SpreadsheetApp.getUi()
      .createMenu('‚öôÔ∏è Menu Otomatis')
      .addItem('1. SINKRONISASI & BUAT LAPORAN', 'syncDanBuatLaporanHarian')
      .addItem('2. BUAT LAPORAN DARI DATA SAAT INI', 'buatLaporanHarianVM')
      .addSeparator()
      .addItem('3. REKOMENDASI MIGRASI DATASTORE', 'runDailyMigrationCheck')
      .addSeparator()
      .addItem('4. Tes Koneksi Telegram', 'tesKoneksiTelegram')
      .addSeparator()
      .addItem('SETUP: Set Webhook (Jalankan 1x)', 'setWebhook')
      .addToUi();
}

function runDailySyncReportForTrigger() {
  console.log("runDailySyncReportForTrigger dipanggil oleh pemicu waktu.");
  syncDanBuatLaporanHarian(false); 
}

function runDailyMigrationCheck() {
  console.log("runDailyMigrationCheck dipanggil oleh pemicu waktu.");
  jalankanRekomendasiMigrasi();
}

function kirimLaporanMingguan() {
  buatLaporanPeriodik('mingguan');
}

function kirimLaporanBulanan() {
  buatLaporanPeriodik('bulanan');
}